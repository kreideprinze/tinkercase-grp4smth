import kivy
from kivy.lang import Builder
from kivy.uix.screenmanager import ScreenManager, Screen
from kivymd.app import MDApp
from kivymd.uix.menu import MDDropdownMenu
from kivymd.uix.button import MDRaisedButton
from kivymd.uix.label import MDLabel
import bluetooth

import kivy
from kivy.lang import Builder
from kivy.uix.screenmanager import ScreenManager, Screen
from kivymd.app import MDApp
from kivymd.uix.menu import MDDropdownMenu
from kivymd.uix.button import MDRaisedButton
from kivymd.uix.label import MDLabel
import bluetooth

class HomeScreen(Screen):
    pass

class DeviceScreen(Screen):
    pass

class MainApp(MDApp):
    def build(self):
        self.screen = Builder.load_string(KV)
        self.bt_socket = None

        nearby_devices = bluetooth.discover_devices(lookup_names=True)
        menu_items = [
            {
                "viewclass": "OneLineListItem",
                "text": f"{name} ({addr})",
                "on_release": lambda x=addr: self.connect_device(x),
            } for addr, name in nearby_devices
        ]

        self.menu = MDDropdownMenu(
            caller=self.screen.get_screen('device').children[1],
            items=menu_items,
            width_mult=4,
        )

        return self.screen

    def connect_device(self, address):
        try:
            self.bt_socket = bluetooth.BluetoothSocket(bluetooth.RFCOMM)
            self.bt_socket.connect((address, 1))
            self.screen.get_screen('device').ids.status_label.text = f'Connected to {address}'
        except Exception as e:
            self.screen.get_screen('device').ids.status_label.text = f'Failed to connect: {str(e)}'
        self.menu.dismiss()

    def turn_on(self):
        if self.bt_socket:
            self.bt_socket.send('1')

    def turn_off(self):
        if self.bt_socket:
            self.bt_socket.send('0')

if __name__ == '__main__':
    MainApp().run()


class HomeScreen(Screen):
    pass

class DeviceScreen(Screen):
    pass

class MainApp(MDApp):
    def build(self):
        self.screen = Builder.load_string(KV)
        self.bt_socket = None

        nearby_devices = bluetooth.discover_devices(lookup_names=True)
        menu_items = [
            {
                "viewclass": "OneLineListItem",
                "text": f"{name} ({addr})",
                "on_release": lambda x=addr: self.connect_device(x),
            } for addr, name in nearby_devices
        ]

        self.menu = MDDropdownMenu(
            caller=self.screen.get_screen('device').children[1],
            items=menu_items,
            width_mult=4,
        )

        return self.screen

    def connect_device(self, address):
        try:
            self.bt_socket = bluetooth.BluetoothSocket(bluetooth.RFCOMM)
            self.bt_socket.connect((address, 1))
            self.screen.get_screen('device').ids.status_label.text = f'Connected to {address}'
        except Exception as e:
            self.screen.get_screen('device').ids.status_label.text = f'Failed to connect: {str(e)}'
        self.menu.dismiss()

    def turn_on(self):
        if self.bt_socket:
            self.bt_socket.send('1')

    def turn_off(self):
        if self.bt_socket:
            self.bt_socket.send('0')

if __name__ == '__main__':
    MainApp().run()

